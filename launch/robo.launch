    <!-- Every launch file starts with this command -->
<launch> 
      <arg name="x_pos" default="0.0"/>
  <arg name="y_pos" default="1.0"/>
  <arg name="z_pos" default="0.0"/>
    <arg name = "start_x" default= "0"/>
  <arg name = "start_y" default= "1"/>
  <arg name = "start_ang" default= "0"/>
  <arg name = "goal_x" default= "3.5"/>
  <arg name = "goal_y" default= ".2"/>
  <arg name = "clearance" default= "7"/>
  <arg name = "rpm1" default= "50"/>
  <arg name = "rpm2" default= "100"/>

    <!-- Include helps you launch other launch files within this launch file-->
        <!-- For file tag, mention the gazebo_ros empty world's launch file -->
        <!-- For the arg name, give any name of your choice to this world -->
        <!-- for the value tag, provide the path to the world file that you downloaded -->
	<include  file="$(find gazebo_ros)/launch/empty_world.launch"> 
		<arg name="world_name" value="$(find modified_robo9_with_planning)/world/pj5.world"/> 
	</include>
		

        <!-- Defining this param here helps you store all the urdf contents of robot+lidar into a single param name -->
        <!-- fill the command by adding in the path to your .xacro file the $ symbol below -->
        <!--  -->
	<param name= "robot_description" command="$(find xacro)/xacro --inorder '$(find modified_robo9_with_planning)/urdf/modified_robo9_with_planning.xacro' " />
    <!-- Add in your robot name in the value tag -->
    <param name = "my_robot" value="modified_robo9_with_planning"/> 
	<arg name ="init_pose" value="-x 0 -y 5 -z 0 -R 0 -P 0 -Y 0"/>
    

    <!-- This command adds the controller variables you defined in the config file into ros's parameter list. Simply add the file name in the file tag -->
	<rosparam file="$(find modified_robo9_with_planning)/config/joint_names_robo9.yaml" command="load"/>

	<!-- Node for publishing base footprint -->
	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="use_gui" value="False"/>
    </node>


    <!-- TF node that gives the static transformation between the world map and the base link of your robot. Change /base_link to the /root link name of your robot -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="map_to_base" args="1 0 0 0 0 0 1 /map /dummy_link 10" /> -->


    <!-- Controller spawner: Starts all the defined controllers with their configs. Just add your controller names defined in your config file into the args tag below   -->
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
    	output="screen" ns="/modified_robo9_with_planning" args="joint_state_controller first_link_controller end_effector_controller tray_diffusor_joint_controller" />  <!--eft_wheel_joint_controller right_wheel_joint_controller-->


    <!-- A node to publish the robot states onto ros network -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen"/>	


    <!-- A node to spawn the robot into gazebo's world file. Notice that the args has the param robot_description that you previously defined. This is how your robot's spec gets included.-->
   	<node
		name="spawn_model"
		pkg="gazebo_ros"
		type="spawn_model"
		args="$(arg init_pose) -param robot_description -urdf -model my_robot"
		output="screen"/>


	<!--Default node -->
	<node
    name="fake_joint_calibration"
    pkg="rostopic"
    type="rostopic"
    args="pub /calibrated std_msgs/Bool true" />


  <node pkg="modified_robo9_with_planning" name="robo_publish" type="autonomous_motion.py" 
    output="screen"
    args = "$(arg start_x) $(arg start_y) $(arg start_ang) $(arg clearance) $(arg rpm1) $(arg rpm2)"/>


    <!--RViz-->
  <!-- <node name="rviz" pkg="rviz" type="rviz" required="true"/> -->
</launch>